<?php

include 'assets/scripts/chromephp/ChromePhp.php';
//ChromePhp::log('Hello console!');
//ChromePhp::log($_SERVER);
//ChromePhp::warn('something went wrong!');

/**
 * @function p
 *
 * Shortcut for a print_r.
 */
function p() {
  if (variable_get('isea_dev_panic', FALSE)) {
    try {
      throw new Exception();
    } catch (Exception $e) {
      echo '<pre>';
      print_r($e);
      die;
    }
  }
  foreach (func_get_args() as $arg) $output[] = print_r($arg, 1);
  echo "<pre>\n" . implode("\n", $output) . "</pre>";
}

/**
 * Check if we are in the front theme or not
 */
function check_if_front_theme () {
  global $theme;

  $admin_theme = variable_get('admin_theme');
  $theme_default = variable_get('theme_default');

  if($theme == $theme_default) { return true; }
  else { return false; }
}

/**
 * Provide a pager
 */
function pager_array_splice($data, $limit = 9, $element = 0) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';
  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);
  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

/**
 * Takes two dates timestamp and creates an 
 * inclusive array of the dates between the from and to dates.
 */
function range_array_date($iDateFrom,$iDateTo) {

  $aryRange=array();

  if ($iDateTo>=$iDateFrom) {
    array_push($aryRange, $iDateFrom); // first entry
    while ($iDateFrom<$iDateTo) {
      $iDateFrom+=86400; // add 24 hours
      array_push($aryRange,$iDateFrom);
    }
  }
  return $aryRange;
}

/**
 * Helper function to add blocks in a less verbose way.
 * @see hook_block_list_alter
 * @param $items array
 *        List of blocks
 *
 * @return a list of (object) blocks available for hook_block_list_alter().
 */
function bgtools_block_factory($items, $block_config = NULL) {
  $default_block_config = array(
    'region' => 'content',
    'title'  => '',
    'cache'  => -1,
    'theme'  => variable_get('theme_default', 'bartik'),
  );

  if ($block_config){
    $default_block_config = array_merge($default_block_config, $block_config);
  }

  $blocks = array();
  foreach($items as $item) {
    $blocks[] = (object)(array_merge($default_block_config, $item));
  }
  return $blocks;
}

/**
 * Helper function to get a list of renderable blocks
 * @see bgtools_block_factory
 * @param $items array, List of block
 */
function bgtools_block_renderable($items, $block_config = NULL) {
  $blocks = isea_core_block_factory($items, $block_config);
  $blocks = _block_render_blocks($blocks);
  $blocks = _block_get_renderable_array($blocks);
  return $blocks;
}

function get_menu_data($menu_name, $depth) {
  $data = array();

  $menu = menu_tree_all_data($menu_name);

  if(function_exists('i18n_menu_localize_tree')) {
    $menu_localize = i18n_menu_localize_tree($menu);
  }
  else { $menu_localize = $menu; }
  
  if(!empty($menu_localize)) {
    foreach ($menu_localize as $key => $menu_parent) {

      if($menu_parent['link']['hidden'] == 0) {
        if(isset($menu_parent['link']['options']['fragment'])) {
          $fragment = $menu_parent['link']['options']['fragment'];
        }
        else { $fragment='';}
        if(!empty($menu_parent['link']['router_path'])) {
          $menu1_url = url($menu_parent['link']['link_path'], array('fragment' => $fragment, 'absolute' => TRUE)); 
        }
        else { $menu1_url = $menu_parent['link']['link_path']; }

        $items = array();
        if(isset($menu_parent['below']) && !empty($menu_parent['below'])) {

          foreach ($menu_parent['below'] as $key => $menu_child) {

            if($menu_child['link']['hidden'] == 0) {
              if(isset($menu_child['link']['options']['fragment'])) {
                $fragment = $menu_child['link']['options']['fragment'];
              }
              else { $fragment='';}
          
              if(!empty($menu_child['link']['router_path'])) { 
                $menu2_url = url($menu_child['link']['link_path'], array('fragment' => $fragment, 'absolute' => TRUE)); 
              }
              else { $menu2_url = $menu_child['link']['link_path']; }
              $items[] = array(
                'title' => $menu_child['link']['link_title'],
                'url' => $menu2_url
              );
            }
          }
        }
        $data[] = array(
          'title' => $menu_parent['link']['link_title'],
          'url' => $menu1_url,
          'items' => $items
        );
      }
    }
  }

  return $data;
}

/**
 * Return date format in french
 */
function date_french($format, $timestamp = null) {
  $param_D = array('', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim');
  $param_l = array('', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche');
  $param_F = array('', 'Janvier', 'F&eacute;vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao&ucirc;t', 'Septembre', 'Octobre', 'Novembre', 'D&eacute;cembre');
  $param_M = array('', 'Jan', 'F&eacute;v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Ao&ucirc;', 'Sep', 'Oct', 'Nov', 'D&eacute;c');

  $return = '';
  if(is_null($timestamp)) { $timestamp = mktime(); }
  for($i = 0, $len = strlen($format); $i < $len; $i++) {
    switch($format[$i]) {
      case '\\' : // double.slashes
        $i++;
        $return .= isset($format[$i]) ? $format[$i] : '';
        break;
      case 'D' :
        $return .= $param_D[date('N', $timestamp)];
        break;
      case 'l' :
        $return .= $param_l[date('N', $timestamp)];
        break;
      case 'F' :
        $return .= $param_F[date('n', $timestamp)];
        break;
      case 'M' :
        $return .= $param_M[date('n', $timestamp)];
        break;
      default :
        $return .= date($format[$i], $timestamp);
        break;
    }
  }
  return $return;
}

function convert_filesize($bytes) {
  if ($bytes >= 1024*1024*1024) {
    // Go
    return round(($bytes / 1024)/1024/1024, 2) ." Go";
  }
  elseif ($bytes >= 1024*1024) {
    // Mo
    return round(($bytes / 1024)/1024, 2) ." Mo";
  }
  elseif ($bytes >= 1024) {
    // ko
    return round(($bytes / 1024), 2) ." ko";
  }
  else {
    // octets
    return $bytes ." octets";
  }
}

/*
 * Return embed image with teh good transmitted preset
*/
function get_data_to_image($image_data, $preset) {
  $image = '';
  if(!empty($image_data) && file_exists($image_data['uri'])) {
    if(isset($preset) && !empty($preset)) {
      $image = theme('image_style',
        array(
          'style_name' => $preset,
          'path' => $image_data['uri'],
          'alt'   => $image_data['alt'],
          'title' => $image_data['title']
        )
      );
    }
    else {
      $image = theme(
        'image',
        array(
          'path'  => file_create_url($image_data['uri']),
          'alt'   => $image_data['alt'],
          'title' => $image_data['title']
        )
      );
    }
  }
  return $image;
}

/*
 * Return directly the image
*/
function get_node_image($node, $preset) {
  $image = '';
  $image_data = get_image_data($node);
  if(!empty($image_data)) {
    $image = get_data_to_image($image_data, $preset);
  }
  return $image;
}

/*
 * Return array long/lat by address
*/
function getLongLatByAddress($address) {
  
  $longLat = array(
    'long' => '',
    'lat'  => '',
  );

  $url = "http://maps.google.com/maps/api/geocode/json?address=".$address;

  try{
    $response = file_get_contents($url);
    $response = json_decode($response, true);
    if(!empty($response) && $response['status'] == 'OK') {
      
      $longLat = array(
        'long' => $response['results'][0]['geometry']['location']['lng'],
        'lat'  => $response['results'][0]['geometry']['location']['lat'],
      );
    }
  }catch(Exception $ex){
    //Process the exception
  }

  return $longLat;
}

function bgtools_apachesolr_query_alter($query) {
  if(isset($_GET['bgsolr'])) {
    $bgsolr = $_GET['bgsolr'];
    $bgsolrExplode = explode(':', $bgsolr);
    if(!empty($bgsolrExplode[1])) {
      $queryLine = '';
      $bgsolrExplodeDecode = urldecode($bgsolrExplode[1]);
      $bgsolrExplodeDecode = trim($bgsolrExplodeDecode);
      $bgsolrExplodeDecode = str_replace('(', '', $bgsolrExplodeDecode);
      $bgsolrExplodeDecode = str_replace(')', '', $bgsolrExplodeDecode);
      //$bgsolrExplodeDecode = str_replace(' ', '', $bgsolrExplodeDecode);
      $bgsolrExplode2 = explode('OR', $bgsolrExplodeDecode);
      foreach ($bgsolrExplode2 as $key => $svalue) {
        if($key == 0) {
          //$queryLine .= $bgsolrExplode[0].':*'.$svalue .'*';
          //$queryLine .= ' OR '.$bgsolrExplode[0].':"'.$svalue .'"';
          $queryLine .= $bgsolrExplode[0].':"'.$svalue .'"';
        }
        else {
          //$queryLine .= ' OR '.$bgsolrExplode[0].':*'.$svalue .'*';
          $queryLine .= ' OR '.$bgsolrExplode[0].':"'.$svalue .'"';
        }
      }

      $query->addParam(
        'q',
        '('.$queryLine.')'
      );
    }
  }
}

function bgtools_mail_send($infos) {
  $module = $infos['module'];
  $key = $infos['key'];
  $to = $infos['to'];
  $from = $infos['from'];
  $language = isset($infos['lang']) ? $infos['lang'] : language_default();
  $params = array(
    'subject' => $infos['subject'],
    'body' => $infos['body'],
  );
  if(array_key_exists('headers', $infos)) {
    $params['headers'] = $infos['headers']; //Assumed as an array
  }

  $errorName = $module.'-email';
  $send = TRUE;
  $mail = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if($mail['result']) { return TRUE; } else {
    $error_msg = 'Failed to send the email '.$module.' Module';
    watchdog($errorName, $error_msg, array(), WATCHDOG_ALERT);
    return FALSE;
  }
}

/**
 * Send debug code to the Javascript console
 */ 
function debug_to_console($data) {
  if(is_array($data) || is_object($data)) {
    echo("<script>console.log('PHP: ".json_encode($data)."');</script>");
  } else {
    echo("<script>console.log('PHP: ".$data."');</script>");
  }
}

function bgremove_accents($str, $charset='utf-8') {
    $str = htmlentities($str, ENT_NOQUOTES, $charset);
    
    $str = preg_replace('#&([A-za-z])(?:acute|cedil|caron|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $str);
    $str = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $str); // pour les ligatures e.g. '&oelig;'
    $str = preg_replace('#&[^;]+;#', '', $str); // supprime les autres caractères
    
    return $str;
}

function block_render($module, $block_id) {
  $block = block_load($module, $block_id);
  $block_content = _block_render_blocks(array($block));
  $build = _block_get_renderable_array($block_content);
  $block_rendered = drupal_render($build);
  return $block_rendered;
}

/* gets the data from a URL */
function get_data($url) {
  $ch = curl_init();
  $timeout = 5;
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}

function bgtools_add_role_to_user($user, $role_name) {
  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user);
  }
  // If the user doesn't already have the role, add the role to that user.
  $key = array_search($role_name, $user->roles);
  if ($key == FALSE) {
    // Get the rid from the roles table.
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      $new_role[$rid] = $role_name;
      $all_roles = $user->roles + $new_role; // Add new role to existing roles.
      user_save($user, array('roles' => $all_roles));
    }
  }
}
function bgtools_add_role_to_user2($user, $role_name) {
  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user);
  }
  // If the user doesn't already have the role, add the role to that user.
  $key = array_search($role_name, $user->roles);
  if ($key == FALSE) {
    // Get the rid from the roles table.
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      db_insert('users_roles')
      ->fields(array(
        'uid' => $user->uid,
        'rid' => $rid,
      ))
      ->execute();
    }
  }
}